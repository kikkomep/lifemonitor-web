---
name: 'CI Pipeline'

on:
  push:
    branches:
      - '**'
    tags:
      - '*.*.*'
  pull_request:

env:
  TERM: xterm
  # enable Docker push only if the required secrets are defined
  ENABLE_DOCKER_PUSH: ${{ secrets.DOCKERHUB_USER != null && secrets.DOCKERHUB_TOKEN != null }}

jobs:
  # Lint TypeScript code
  test:
    name: Lint and Test Angular App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: '16.18'
      - name: Install dependencies
        run: npm install
      - name: Install Angular CLI
        run: npm install -g @angular/cli@15.0.0
      - name: Initialize testing environment
        run: |
          cat src/app/environments/environment.test.ts <<- EndOfSettings
          {
            production: false,
            apiBaseUrl: ${API_BASE_URL},
            clientId: ${API_CLIENT_ID},
            configFile: "/assets/config.json",
          }
          EndOfSettings
          ln -sf src/app/environments/environment.test.ts src/assets/config.json
        env:
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          API_CLIENT_ID: ${{ secrets.API_CLIENT_ID }}
      - name: ESLinting
        run: npm run lint
      - name: Run tests
        run: npm run test:ci

  # Build and Push Docker image
  docker:
    needs: [test]
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      # Checkout source code
      - name: Checkout
        uses: actions/checkout@v3

        # Set Docker image
      - name: Set up Docker repository
        run: echo "DOCKERHUB_REPO=$( if [[ -n $USER_REPO ]]; then echo $USER_REPO; else echo $GITHUB_REPOSITORY; fi )" >> $GITHUB_ENV
        env:
          USER_REPO: ${{ secrets.DOCKERHUB_REPO }}

      # Compute and extract software version as env variable
      - name: Set software version
        run: |
          sw_version=$(jq -r ".version" package.json)
          ref_name=${{ github.ref_name }}
          if [[ ${ref_name} == 'develop'  ]]; then sw_version="${sw_version}-dev"; fi
          echo "SOFTWARE_VERSION=${sw_version}" >> $GITHUB_ENV
          sw_version_tag=false
          if [[ "${ref_name}" == "master" || "${ref_name}" == "develop" ]]; then sw_version_tag=true; fi
          echo "ENABLE_SOFTWARE_VERSION_TAG=${sw_version_tag}" >> $GITHUB_ENV

      # Extract Docker metadata
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKERHUB_REPO }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=${{ env.SOFTWARE_VERSION }},enable=${{env.ENABLE_SOFTWARE_VERSION_TAG}}
            type=raw,value=${{ env.SOFTWARE_VERSION}}.build${{ github.run_number }},enable=${{env.ENABLE_SOFTWARE_VERSION_TAG}}
            type=sha
          labels: |
            org.opencontainers.image.software=${{ env.SOFTWARE_VERSION }}.build${{ github.run_number }}
            org.opencontainers.image.build=${{ github.run_number }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      # DockerHub Login
      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: ${{ env.ENABLE_DOCKER_PUSH == 'true' }}
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build and push
      - name: Build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64
          push: ${{ env.ENABLE_DOCKER_PUSH == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
